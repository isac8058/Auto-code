// scripts/generate-app.js
const fs = require('fs');
const path = require('path');

// Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú Ïï± Ïπ¥ÌÖåÍ≥†Î¶¨
const engineeringApps = {
  // ÏàòÌïô/Í≥ÑÏÇ∞ ÎèÑÍµ¨
  mathematics: [
    {
      name: 'ÌñâÎ†¨ Í≥ÑÏÇ∞Í∏∞ & ÏãúÍ∞ÅÌôî',
      description: 'ÌñâÎ†¨ Ïó∞ÏÇ∞ÏùÑ Îã®Í≥ÑÎ≥ÑÎ°ú Î≥¥Ïó¨Ï£ºÍ≥† Í≥†Ïú†Í∞í, Ïó≠ÌñâÎ†¨ÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§',
      type: 'calculator',
      generateApp: (date) => generateMatrixCalculator(date)
    },
    {
      name: 'ÎùºÌîåÎùºÏä§ Î≥ÄÌôò Í≥ÑÏÇ∞Í∏∞',
      description: 'ÎØ∏Î∂ÑÎ∞©Ï†ïÏãùÏùÑ ÎùºÌîåÎùºÏä§ Î≥ÄÌôòÏúºÎ°ú ÏâΩÍ≤å ÌíÄÏñ¥Î≥¥ÏÑ∏Ïöî',
      type: 'calculator',
      generateApp: (date) => generateLaplaceTransform(date)
    },
    {
      name: 'Ï†ÅÎ∂Ñ ÏãúÍ∞ÅÌôî ÎèÑÍµ¨',
      description: 'Ï†ïÏ†ÅÎ∂ÑÏùò ÎÑìÏù¥Î•º ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Ïù¥Ìï¥ÌïòÍ≥† ÏàòÏπòÏ†ÅÎ∂ÑÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§',
      type: 'visualizer',
      generateApp: (date) => generateIntegralVisualizer(date)
    }
  ],
  
  // Î¨ºÎ¶¨Ìïô ÏãúÎÆ¨Î†àÏù¥ÏÖò
  physics: [
    {
      name: 'ÏßÑÏûê Ïö¥Îèô ÏãúÎÆ¨Î†àÏù¥ÌÑ∞',
      description: 'Îã®ÏßÑÏûêÏôÄ Î≥µÏßÑÏûêÏùò Ïö¥ÎèôÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï©ÎãàÎã§',
      type: 'simulator',
      generateApp: (date) => generatePendulumSimulator(date)
    },
    {
      name: 'Ìè¨Î¨ºÏÑ† Ïö¥Îèô Ïã§ÌóòÏã§',
      description: 'Ï¥àÍ∏∞ ÏÜçÎèÑÏôÄ Í∞ÅÎèÑÎ•º Ï°∞Ï†àÌïòÏó¨ Ìè¨Î¨ºÏÑ† Ïö¥ÎèôÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§',
      type: 'simulator',
      generateApp: (date) => generateProjectileMotion(date)
    },
    {
      name: 'ÌååÎèô Í∞ÑÏÑ≠ ÏãúÍ∞ÅÌôî',
      description: 'Îëê ÌååÏõêÏùò Í∞ÑÏÑ≠ Ìå®ÌÑ¥ÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í¥ÄÏ∞∞Ìï©ÎãàÎã§',
      type: 'visualizer',
      generateApp: (date) => generateWaveInterference(date)
    }
  ],
  
  // Í≥µÌïô ÎèÑÍµ¨
  engineering: [
    {
      name: 'Îã®ÏúÑ Î≥ÄÌôò ÎßàÏä§ÌÑ∞',
      description: 'SI, Imperial, Í≥µÌïô Îã®ÏúÑÎ•º ÏâΩÍ≤å Î≥ÄÌôòÌïòÎäî Ïò¨Ïù∏Ïõê ÎèÑÍµ¨',
      type: 'converter',
      generateApp: (date) => generateUnitConverter(date)
    },
    {
      name: 'ÌöåÎ°ú ÏãúÎÆ¨Î†àÏù¥ÌÑ∞',
      description: 'Í∏∞Î≥∏ Ï†ÑÏûê ÌöåÎ°úÎ•º Íµ¨ÏÑ±ÌïòÍ≥† Ï†ÑÏïï/Ï†ÑÎ•òÎ•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§',
      type: 'simulator',
      generateApp: (date) => generateCircuitSimulator(date)
    },
    {
      name: 'Î≥¥ ÍµΩÌûò Í≥ÑÏÇ∞Í∏∞',
      description: 'Ïû¨Î£åÏó≠Ìïô Î≥¥Ïùò ÍµΩÌûò Î™®Î©òÌä∏ÏôÄ Ï†ÑÎã®Î†•ÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§',
      type: 'calculator',
      generateApp: (date) => generateBeamCalculator(date)
    }
  ],
  
  // ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç/ÏïåÍ≥†Î¶¨Ï¶ò
  programming: [
    {
      name: 'Ï†ïÎ†¨ ÏïåÍ≥†Î¶¨Ï¶ò ÎπÑÍµê',
      description: 'Îã§ÏñëÌïú Ï†ïÎ†¨ ÏïåÍ≥†Î¶¨Ï¶òÏùò ÏÑ±Îä•ÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÎπÑÍµêÌï©ÎãàÎã§',
      type: 'visualizer',
      generateApp: (date) => generateSortingVisualizer(date)
    },
    {
      name: 'ÎπÖÏò§ Î≥µÏû°ÎèÑ Í≥ÑÏÇ∞Í∏∞',
      description: 'ÏΩîÎìúÏùò ÏãúÍ∞Ñ/Í≥µÍ∞Ñ Î≥µÏû°ÎèÑÎ•º Î∂ÑÏÑùÌïòÍ≥† Í∑∏ÎûòÌîÑÎ°ú ÌëúÏãúÌï©ÎãàÎã§',
      type: 'analyzer',
      generateApp: (date) => generateBigOCalculator(date)
    },
    {
      name: 'Ïù¥ÏßÑ Ìä∏Î¶¨ ÏãúÍ∞ÅÌôî',
      description: 'Ïù¥ÏßÑ Ìä∏Î¶¨Ïùò ÏÇΩÏûÖ, ÏÇ≠Ï†ú, ÏàúÌöåÎ•º Îã®Í≥ÑÎ≥ÑÎ°ú Î≥¥Ïó¨Ï§çÎãàÎã§',
      type: 'visualizer',
      generateApp: (date) => generateBinaryTreeVisualizer(date)
    }
  ],
  
  // ÌïôÏäµ ÎèÑÍµ¨
  study: [
    {
      name: 'Í≥µÏãù ÏïîÍ∏∞ Í≤åÏûÑ',
      description: 'Ï§ëÏöîÌïú Í≥µÌïô Í≥µÏãùÏùÑ Í≤åÏûÑÏúºÎ°ú Ïû¨ÎØ∏ÏûàÍ≤å ÏïîÍ∏∞ÌïòÏÑ∏Ïöî',
      type: 'game',
      generateApp: (date) => generateFormulaGame(date)
    },
    {
      name: 'Ìè¨Î™®ÎèÑÎ°ú Í≥µÎ∂Ä ÌÉÄÏù¥Î®∏',
      description: 'Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú ÎßûÏ∂§Ìòï Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏ÏôÄ ÌÜµÍ≥Ñ',
      type: 'productivity',
      generateApp: (date) => generatePomodoroTimer(date)
    },
    {
      name: 'GPA Í≥ÑÏÇ∞Í∏∞ & ÏòàÏ∏°',
      description: 'ÌòÑÏû¨ ÏÑ±Ï†ÅÏúºÎ°ú Ï°∏ÏóÖ GPAÎ•º ÏòàÏ∏°ÌïòÍ≥† Î™©ÌëúÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§',
      type: 'calculator',
      generateApp: (date) => generateGPACalculator(date)
    }
  ],
  
  // Ïã§ÏÉùÌôú ÎèÑÍµ¨
  practical: [
    {
      name: 'Ïπ¥ÌéòÏù∏ Í≥ÑÏÇ∞Í∏∞',
      description: 'ÏãúÌóòÍ∏∞Í∞Ñ Ïπ¥ÌéòÏù∏ ÏÑ≠Ï∑®ÎüâÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† ÏµúÏ†ÅÌôîÌï©ÎãàÎã§',
      type: 'tracker',
      generateApp: (date) => generateCaffeineCalculator(date)
    },
    {
      name: 'ÌîÑÎ°úÏ†ùÌä∏ ÏùºÏ†ï Í¥ÄÎ¶¨',
      description: 'Í∞ÑÌä∏ Ï∞®Ìä∏Î°ú ÌåÄ ÌîÑÎ°úÏ†ùÌä∏ ÏùºÏ†ïÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§',
      type: 'planner',
      generateApp: (date) => generateProjectPlanner(date)
    },
    {
      name: 'Ïã§Ìóò Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÍ∏∞',
      description: 'Ïã§Ìóò Îç∞Ïù¥ÌÑ∞Ïùò ÌèâÍ∑†, ÌëúÏ§ÄÌé∏Ï∞®, Í∑∏ÎûòÌîÑÎ•º ÏûêÎèô ÏÉùÏÑ±Ìï©ÎãàÎã§',
      type: 'analyzer',
      generateApp: (date) => generateDataAnalyzer(date)
    }
  ]
};

// Ïò§Îäò ÎÇ†Ïßú Í∏∞Î∞ò Ïï± ÏÑ†ÌÉù
function selectTodaysApps() {
  const categories = Object.keys(engineeringApps);
  const selectedApps = [];
  
  // Í∞Å Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú ÌïòÎÇòÏî© ÏÑ†ÌÉù (Ï¥ù 3Í∞ú)
  const today = new Date();
  const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
  
  // ÎÇ†Ïßú Í∏∞Î∞ò ÏùòÏÇ¨ ÎûúÎç§ ÏÑ†ÌÉù
  for (let i = 0; i < 3; i++) {
    const categoryIndex = (dayOfYear + i) % categories.length;
    const category = categories[categoryIndex];
    const apps = engineeringApps[category];
    const appIndex = (dayOfYear + i * 7) % apps.length;
    
    selectedApps.push({
      category,
      ...apps[appIndex]
    });
  }
  
  return selectedApps;
}

// Î©îÏù∏ Ìï®Ïàò
async function generateEngineeringApps() {
  console.log('üéì Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú Ïï± ÏÉùÏÑ± ÏãúÏûë...');
  
  const today = new Date();
  const dateStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
  const appsDir = path.join(__dirname, '..', 'apps', dateStr);
  
  // ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
  if (!fs.existsSync(appsDir)) {
    fs.mkdirSync(appsDir, { recursive: true });
  }
  
  // Ïò§ÎäòÏùò Ïï± ÏÑ†ÌÉù
  const selectedApps = selectTodaysApps();
  const appInfo = {
    date: dateStr,
    theme: 'Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú Ïã§Ïö©Ï†Å ÎèÑÍµ¨',
    apps: []
  };
  
  // 3Í∞ú Ïï± ÏÉùÏÑ±
  for (let i = 0; i < selectedApps.length; i++) {
    const app = selectedApps[i];
    const appId = `app${i + 1}`;
    const appDir = path.join(appsDir, appId);
    
    if (!fs.existsSync(appDir)) {
      fs.mkdirSync(appDir, { recursive: true });
    }
    
    // HTML ÏÉùÏÑ±
    const htmlContent = app.generateApp(dateStr);
    fs.writeFileSync(path.join(appDir, 'index.html'), htmlContent);
    
    appInfo.apps.push({
      id: appId,
      name: app.name,
      description: app.description,
      category: app.category,
      type: app.type
    });
    
    console.log(`‚úÖ ÏÉùÏÑ± ÏôÑÎ£å: ${app.name}`);
  }
  
  // Ïï± Ï†ïÎ≥¥ Ï†ÄÏû•
  fs.writeFileSync(
    path.join(appsDir, 'app-info.json'),
    JSON.stringify(appInfo, null, 2)
  );
  
  // Ïù∏Îç±Ïä§ ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
  generateIndexPage(appsDir, appInfo);
  
  // README ÏóÖÎç∞Ïù¥Ìä∏
  updateReadme(appInfo);
  
  console.log(`üéâ ${dateStr} Í≥µÎåÄÏÉù Ïï± 3Í∞ú ÏÉùÏÑ± ÏôÑÎ£å!`);
}

// Ïù∏Îç±Ïä§ ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
function generateIndexPage(appsDir, appInfo) {
  const indexHtml = `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${appInfo.date} - Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú Ïï±</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 {
            color: white;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }
        .subtitle {
            color: rgba(255,255,255,0.8);
            text-align: center;
            margin-bottom: 40px;
            font-size: 1.2rem;
        }
        .apps-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
        }
        .app-card {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
            position: relative;
            overflow: hidden;
        }
        .app-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #4CAF50, #2196F3, #9C27B0);
        }
        .app-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        }
        .category-badge {
            display: inline-block;
            background: #f0f0f0;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-bottom: 15px;
            text-transform: uppercase;
            font-weight: 600;
            color: #666;
        }
        .app-title {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #333;
        }
        .app-description {
            color: #666;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .app-type {
            font-size: 0.9rem;
            color: #999;
            margin-bottom: 20px;
        }
        .launch-button {
            display: block;
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 10px;
            text-align: center;
            font-weight: bold;
            transition: opacity 0.3s;
        }
        .launch-button:hover {
            opacity: 0.9;
        }
        .emoji {
            font-size: 2rem;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéì Ïò§ÎäòÏùò Í≥µÎåÄÏÉù ÌïÑÏàò Ïï±</h1>
        <div class="subtitle">${new Date(appInfo.date).toLocaleDateString('ko-KR', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            weekday: 'long'
        })}</div>
        
        <div class="apps-grid">
            ${appInfo.apps.map((app, index) => {
                const emojis = ['üßÆ', '‚ö°', 'üìê', 'üíª', 'üìä', 'üî¨'];
                const emoji = emojis[index % emojis.length];
                
                return `
                <div class="app-card">
                    <div class="emoji">${emoji}</div>
                    <div class="category-badge">${app.category}</div>
                    <h2 class="app-title">${app.name}</h2>
                    <p class="app-description">${app.description}</p>
                    <p class="app-type">ÌÉÄÏûÖ: ${app.type}</p>
                    <a href="${app.id}/index.html" class="launch-button">
                        Ïï± Ïã§ÌñâÌïòÍ∏∞ ‚Üí
                    </a>
                </div>
                `;
            }).join('')}
        </div>
    </div>
</body>
</html>`;
  
  fs.writeFileSync(path.join(appsDir, 'index.html'), indexHtml);
}

// README ÏóÖÎç∞Ïù¥Ìä∏
function updateReadme(appInfo) {
  const readmePath = path.join(__dirname, '..', 'README.md');
  let readmeContent = '';
  
  if (fs.existsSync(readmePath)) {
    readmeContent = fs.readFileSync(readmePath, 'utf8');
  } else {
    readmeContent = `# üéì Í≥µÎåÄÏÉùÏùÑ ÏúÑÌïú ÏùºÏùº Ïï± ÏÉùÏÑ±Í∏∞

Îß§Ïùº Í≥µÎåÄÏÉùÎì§ÏóêÍ≤å Ïú†Ïö©Ìïú ÎèÑÍµ¨ÏôÄ ÏãúÎÆ¨Î†àÏù¥ÌÑ∞Î•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§!

## ÏµúÍ∑º ÏÉùÏÑ±Îêú Ïï±Îì§

`;
  }
  
  const newEntry = `### üìÖ ${appInfo.date}

**ÏÉùÏÑ±Îêú Ïï±:**
${appInfo.apps.map((app, index) => 
  `${index + 1}. **${app.name}** - ${app.description}
   - Ïπ¥ÌÖåÍ≥†Î¶¨: ${app.category}
   - ÌÉÄÏûÖ: ${app.type}
   - [Ïã§ÌñâÌïòÍ∏∞](apps/${appInfo.date}/${app.id}/index.html)`
).join('\n\n')}

[üì± Î™®Îì† Ïï± Î≥¥Í∏∞](apps/${appInfo.date}/index.html)

---

`;
  
  const sectionIndex = readmeContent.indexOf('## ÏµúÍ∑º ÏÉùÏÑ±Îêú Ïï±Îì§');
  if (sectionIndex !== -1) {
    const insertIndex = readmeContent.indexOf('\n', sectionIndex) + 2;
    readmeContent = readmeContent.slice(0, insertIndex) + newEntry + readmeContent.slice(insertIndex);
  }
  
  fs.writeFileSync(readmePath, readmeContent);
}

// ÌñâÎ†¨ Í≥ÑÏÇ∞Í∏∞ ÌÖúÌîåÎ¶ø
function generateMatrixCalculator(date) {
  return `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÌñâÎ†¨ Í≥ÑÏÇ∞Í∏∞ & ÏãúÍ∞ÅÌôî</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #f5f5f5;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        .matrix-input {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-bottom: 20px;
            max-width: 300px;
            margin: 0 auto 20px;
        }
        .matrix-input input {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            text-align: center;
            font-size: 1.1rem;
        }
        .matrix-input input:focus {
            border-color: #4CAF50;
            outline: none;
        }
        .controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }
        .calculate-btn {
            background: #4CAF50;
            color: white;
        }
        .calculate-btn:hover {
            background: #45a049;
        }
        .operation-btn {
            background: #2196F3;
            color: white;
        }
        .operation-btn:hover {
            background: #1976D2;
        }
        .result {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }
        .result h3 {
            color: #333;
            margin-bottom: 10px;
        }
        .matrix-display {
            font-family: monospace;
            font-size: 1.2rem;
            text-align: center;
            margin: 10px 0;
        }
        .matrix-bracket {
            display: inline-block;
            border: 2px solid #333;
            border-right: none;
            border-radius: 5px 0 0 5px;
            padding: 10px 5px;
        }
        .matrix-bracket-right {
            border-left: none;
            border-right: 2px solid #333;
            border-radius: 0 5px 5px 0;
        }
        .error {
            color: #f44336;
            text-align: center;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üßÆ ÌñâÎ†¨ Í≥ÑÏÇ∞Í∏∞ & ÏãúÍ∞ÅÌôî</h1>
        
        <h3 style="text-align: center; margin-bottom: 20px;">3√ó3 ÌñâÎ†¨ ÏûÖÎ†•</h3>
        <div class="matrix-input" id="matrixA">
            <input type="number" value="1" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="1" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="0" step="any">
            <input type="number" value="1" step="any">
        </div>
        
        <div class="controls">
            <button class="calculate-btn" onclick="calculateDeterminant()">ÌñâÎ†¨Ïãù</button>
            <button class="calculate-btn" onclick="calculateInverse()">Ïó≠ÌñâÎ†¨</button>
            <button class="calculate-btn" onclick="calculateEigenvalues()">Í≥†Ïú†Í∞í</button>
            <button class="operation-btn" onclick="calculateTranspose()">Ï†ÑÏπòÌñâÎ†¨</button>
            <button class="operation-btn" onclick="calculateTrace()">ÎåÄÍ∞ÅÌï©</button>
        </div>
        
        <div id="results"></div>
    </div>
    
    <script>
        function getMatrix() {
            const inputs = document.querySelectorAll('#matrixA input');
            const matrix = [];
            for (let i = 0; i < 3; i++) {
                matrix[i] = [];
                for (let j = 0; j < 3; j++) {
                    matrix[i][j] = parseFloat(inputs[i * 3 + j].value) || 0;
                }
            }
            return matrix;
        }
        
        function displayMatrix(matrix, title) {
            let html = '<div class="matrix-display">';
            html += '<h3>' + title + '</h3>';
            html += '<span class="matrix-bracket">[</span>';
            for (let i = 0; i < matrix.length; i++) {
                for (let j = 0; j < matrix[i].length; j++) {
                    html += matrix[i][j].toFixed(2) + (j < matrix[i].length - 1 ? ', ' : '');
                }
                if (i < matrix.length - 1) html += '<br>';
            }
            html += '<span class="matrix-bracket matrix-bracket-right">]</span>';
            html += '</div>';
            return html;
        }
        
        function det3x3(m) {
            return m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) -
                   m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) +
                   m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]);
        }
        
        function calculateDeterminant() {
            const matrix = getMatrix();
            const det = det3x3(matrix);
            
            const results = document.getElementById('results');
            results.innerHTML = '<div class="result">' +
                displayMatrix(matrix, 'ÏûÖÎ†• ÌñâÎ†¨') +
                '<h3>ÌñâÎ†¨Ïãù (Determinant)</h3>' +
                '<p style="font-size: 1.5rem; text-align: center;">det(A) = ' + det.toFixed(4) + '</p>' +
                '</div>';
        }
        
        function calculateInverse() {
            const matrix = getMatrix();
            const det = det3x3(matrix);
            
            if (Math.abs(det) < 0.0001) {
                document.getElementById('results').innerHTML = 
                    '<div class="error">Ïó≠ÌñâÎ†¨Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§ (ÌñâÎ†¨Ïãù = 0)</div>';
                return;
            }
            
            // Ïó¨Ïù∏Ïàò ÌñâÎ†¨ Í≥ÑÏÇ∞
            const cofactor = [];
            for (let i = 0; i < 3; i++) {
                cofactor[i] = [];
                for (let j = 0; j < 3; j++) {
                    const minor = [];
                    for (let mi = 0; mi < 3; mi++) {
                        if (mi === i) continue;
                        const row = [];
                        for (let mj = 0; mj < 3; mj++) {
                            if (mj === j) continue;
                            row.push(matrix[mi][mj]);
                        }
                        minor.push(row);
                    }
                    const sign = ((i + j) % 2 === 0) ? 1 : -1;
                    cofactor[i][j] = sign * (minor[0][0] * minor[1][1] - minor[0][1] * minor[1][0]);
                }
            }
            
            // Ï†ÑÏπò ÌõÑ ÌñâÎ†¨ÏãùÏúºÎ°ú ÎÇòÎàÑÍ∏∞
            const inverse = [];
            for (let i = 0; i < 3; i++) {
                inverse[i] = [];
                for (let j = 0; j < 3; j++) {
                    inverse[i][j] = cofactor[j][i] / det;
                }
            }
            
            const results = document.getElementById('results');
            results.innerHTML = '<div class="result">' +
                displayMatrix(matrix, 'ÏûÖÎ†• ÌñâÎ†¨ A') +
                displayMatrix(inverse, 'Ïó≠ÌñâÎ†¨ A‚Åª¬π') +
                '<p style="text-align: center; margin-top: 10px;">Í≤ÄÏ¶ù: A √ó A‚Åª¬π = I</p>' +
                '</div>';
        }
        
        function calculateTranspose() {
            const matrix = getMatrix();
            const transpose = [];
            for (let i = 0; i < 3; i++) {
                transpose[i] = [];
                for (let j = 0; j < 3; j++) {
                    transpose[i][j] = matrix[j][i];
                }
            }
            
            const results = document.getElementById('results');
            results.innerHTML = '<div class="result">' +
                displayMatrix(matrix, 'ÏûÖÎ†• ÌñâÎ†¨ A') +
                displayMatrix(transpose, 'Ï†ÑÏπòÌñâÎ†¨ A·µÄ') +
                '</div>';
        }
        
        function calculateTrace() {
            const matrix = getMatrix();
            const trace = matrix[0][0] + matrix[1][1] + matrix[2][2];
            
            const results = document.getElementById('results');
            results.innerHTML = '<div class="result">' +
                displayMatrix(matrix, 'ÏûÖÎ†• ÌñâÎ†¨') +
                '<h3>ÎåÄÍ∞ÅÌï© (Trace)</h3>' +
                '<p style="font-size: 1.5rem; text-align: center;">tr(A) = ' + trace.toFixed(4) + '</p>' +
                '<p style="text-align: center; color: #666;">= ' + 
                matrix[0][0].toFixed(2) + ' + ' + 
                matrix[1][1].toFixed(2) + ' + ' + 
                matrix[2][2].toFixed(2) + '</p>' +
                '</div>';
        }
        
        function calculateEigenvalues() {
            const matrix = getMatrix();
            
            // ÌäπÏÑ± Îã§Ìï≠Ïãù Í≥ÑÏÇ∞ (Í∞ÑÎã®Ìïú Í∑ºÏÇ¨Ïπò)
            const trace = matrix[0][0] + matrix[1][1] + matrix[2][2];
            const det = det3x3(matrix);
            
            const results = document.getElementById('results');
            results.innerHTML = '<div class="result">' +
                displayMatrix(matrix, 'ÏûÖÎ†• ÌñâÎ†¨') +
                '<h3>Í≥†Ïú†Í∞í Í≥ÑÏÇ∞ (Í∑ºÏÇ¨Ïπò)</h3>' +
                '<p style="text-align: center;">ÌäπÏÑ± Îã§Ìï≠Ïãù: det(A - ŒªI) = 0</p>' +
                '<p style="text-align: center; color: #666;">ÎåÄÍ∞ÅÌï©: ' + trace.toFixed(4) + '</p>' +
                '<p style="text-align: center; color: #666;">ÌñâÎ†¨Ïãù: ' + det.toFixed(4) + '</p>' +
                '<p style="text-align: center; margin-top: 10px; font-size: 0.9rem; color: #888;">Ï†ïÌôïÌïú Í≥†Ïú†Í∞í Í≥ÑÏÇ∞ÏùÄ ÏàòÏπòÌï¥ÏÑù ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§</p>' +
                '</div>';
        }
    </script>
</body>
</html>`;
}

// Îã®ÏúÑ Î≥ÄÌôòÍ∏∞ ÌÖúÌîåÎ¶ø
function generateUnitConverter(date) {
  return `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Í≥µÌïô Îã®ÏúÑ Î≥ÄÌôò ÎßàÏä§ÌÑ∞</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        .category-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            overflow-x: auto;
            padding-bottom: 10px;
        }
        .tab {
            padding: 10px 20px;
            background: #f0f0f0;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            white-space: nowrap;
            transition: all 0.3s;
        }
        .tab.active {
            background: #667eea;
            color: white;
        }
        .converter-section {
            display: none;
        }
        .converter-section.active {
            display: block;
        }
        .input-group {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 20px;
            align-items: center;
            margin-bottom: 20px;
        }
        .unit-input {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
        }
        .unit-input input {
            width: 100%;
            border: none;
            background: none;
            font-size: 1.5rem;
            outline: none;
            text-align: center;
        }
        .unit-input select {
            width: 100%;
            margin-top: 10px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background: white;
        }
        .equals {
            font-size: 2rem;
            color: #667eea;
            text-align: center;
        }
        .common-conversions {
            margin-top: 30px;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 10px;
        }
        .common-conversions h3 {
            margin-bottom: 15px;
            color: #333;
        }
        .conversion-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .conversion-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ö° Í≥µÌïô Îã®ÏúÑ Î≥ÄÌôò ÎßàÏä§ÌÑ∞</h1>
        
        <div class="category-tabs">
            <button class="tab active" onclick="showCategory('length')">Í∏∏Ïù¥</button>
            <button class="tab" onclick="showCategory('mass')">ÏßàÎüâ</button>
            <button class="tab" onclick="showCategory('pressure')">ÏïïÎ†•</button>
            <button class="tab" onclick="showCategory('energy')">ÏóêÎÑàÏßÄ</button>
            <button class="tab" onclick="showCategory('power')">Ï†ÑÎ†•</button>
            <button class="tab" onclick="showCategory('temperature')">Ïò®ÎèÑ</button>
        </div>
        
        <!-- Í∏∏Ïù¥ Î≥ÄÌôò -->
        <div class="converter-section active" id="length">
            <div class="input-group">
                <div class="unit-input">
                    <input type="number" id="length1" value="1" oninput="convertLength(1)">
                    <select id="lengthUnit1" onchange="convertLength(1)">
                        <option value="m">ÎØ∏ÌÑ∞ (m)</option>
                        <option value="km">ÌÇ¨Î°úÎØ∏ÌÑ∞ (km)</option>
                        <option value="cm">ÏÑºÌã∞ÎØ∏ÌÑ∞ (cm)</option>
                        <option value="mm">Î∞ÄÎ¶¨ÎØ∏ÌÑ∞ (mm)</option>
                        <option value="in">Ïù∏Ïπò (in)</option>
                        <option value="ft">ÌîºÌä∏ (ft)</option>
                        <option value="yd">ÏïºÎìú (yd)</option>
                        <option value="mile">ÎßàÏùº (mile)</option>
                    </select>
                </div>
                <div class="equals">=</div>
                <div class="unit-input">
                    <input type="number" id="length2" readonly>
                    <select id="lengthUnit2" onchange="convertLength(1)">
                        <option value="m">ÎØ∏ÌÑ∞ (m)</option>
                        <option value="km">ÌÇ¨Î°úÎØ∏ÌÑ∞ (km)</option>
                        <option value="cm">ÏÑºÌã∞ÎØ∏ÌÑ∞ (cm)</option>
                        <option value="mm" selected>Î∞ÄÎ¶¨ÎØ∏ÌÑ∞ (mm)</option>
                        <option value="in">Ïù∏Ïπò (in)</option>
                        <option value="ft">ÌîºÌä∏ (ft)</option>
                        <option value="yd">ÏïºÎìú (yd)</option>
                        <option value="mile">ÎßàÏùº (mile)</option>
                    </select>
                </div>
            </div>
            
            <div class="common-conversions">
                <h3>ÏûêÏ£º ÏÇ¨Ïö©ÌïòÎäî Î≥ÄÌôò</h3>
                <div class="conversion-item">
                    <span>1 Ïù∏Ïπò</span>
                    <span>= 25.4 mm</span>
                </div>
                <div class="conversion-item">
                    <span>1 ÌîºÌä∏</span>
                    <span>= 0.3048 m</span>
                </div>
                <div class="conversion-item">
                    <span>1 ÎßàÏùº</span>
                    <span>= 1.60934 km</span>
                </div>
            </div>
        </div>
        
        <!-- ÏïïÎ†• Î≥ÄÌôò -->
        <div class="converter-section" id="pressure">
            <div class="input-group">
                <div class="unit-input">
                    <input type="number" id="pressure1" value="1" oninput="convertPressure(1)">
                    <select id="pressureUnit1" onchange="convertPressure(1)">
                        <option value="Pa">ÌååÏä§Ïπº (Pa)</option>
                        <option value="kPa">ÌÇ¨Î°úÌååÏä§Ïπº (kPa)</option>
                        <option value="MPa">Î©îÍ∞ÄÌååÏä§Ïπº (MPa)</option>
                        <option value="bar">Î∞î (bar)</option>
                        <option value="atm" selected>ÎåÄÍ∏∞Ïïï (atm)</option>
                        <option value="psi">psi</option>
                        <option value="torr">ÌÜ†Î•¥ (torr)</option>
                    </select>
                </div>
                <div class="equals">=</div>
                <div class="unit-input">
                    <input type="number" id="pressure2" readonly>
                    <select id="pressureUnit2" onchange="convertPressure(1)">
                        <option value="Pa" selected>ÌååÏä§Ïπº (Pa)</option>
                        <option value="kPa">ÌÇ¨Î°úÌååÏä§Ïπº (kPa)</option>
                        <option value="MPa">Î©îÍ∞ÄÌååÏä§Ïπº (MPa)</option>
                        <option value="bar">Î∞î (bar)</option>
                        <option value="atm">ÎåÄÍ∏∞Ïïï (atm)</option>
                        <option value="psi">psi</option>
                        <option value="torr">ÌÜ†Î•¥ (torr)</option>
                    </select>
                </div>
            </div>
            
            <div class="common-conversions">
                <h3>ÏûêÏ£º ÏÇ¨Ïö©ÌïòÎäî Î≥ÄÌôò</h3>
                <div class="conversion-item">
                    <span>1 atm</span>
                    <span>= 101,325 Pa</span>
                </div>
                <div class="conversion-item">
                    <span>1 bar</span>
                    <span>= 100,000 Pa</span>
                </div>
                <div class="conversion-item">
                    <span>1 psi</span>
                    <span>= 6,895 Pa</span>
                </div>
            </div>
        </div>
        
        <!-- Îã§Î•∏ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ÎèÑ ÎèôÏùºÌïú Íµ¨Ï°∞Î°ú Ï∂îÍ∞Ä -->
    </div>
    
    <script>
        // Îã®ÏúÑ Î≥ÄÌôò ÏÉÅÏàò
        const conversions = {
            length: {
                m: 1,
                km: 0.001,
                cm: 100,
                mm: 1000,
                in: 39.3701,
                ft: 3.28084,
                yd: 1.09361,
                mile: 0.000621371
            },
            pressure: {
                Pa: 1,
                kPa: 0.001,
                MPa: 0.000001,
                bar: 0.00001,
                atm: 0.00000986923,
                psi: 0.000145038,
                torr: 0.00750062
            }
        };
        
        function showCategory(category) {
            // Î™®Îì† ÌÉ≠Í≥º ÏÑπÏÖò ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.converter-section').forEach(section => section.classList.remove('active'));
            
            // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôúÏÑ±Ìôî
            event.target.classList.add('active');
            document.getElementById(category).classList.add('active');
        }
        
        function convertLength(from) {
            const value = parseFloat(document.getElementById('length1').value) || 0;
            const fromUnit = document.getElementById('lengthUnit1').value;
            const toUnit = document.getElementById('lengthUnit2').value;
            
            // Î®ºÏ†Ä ÎØ∏ÌÑ∞Î°ú Î≥ÄÌôò
            const meters = value / conversions.length[fromUnit];
            // Î™©Ìëú Îã®ÏúÑÎ°ú Î≥ÄÌôò
            const result = meters * conversions.length[toUnit];
            
            document.getElementById('length2').value = result.toFixed(6);
        }
        
        function convertPressure(from) {
            const value = parseFloat(document.getElementById('pressure1').value) || 0;
            const fromUnit = document.getElementById('pressureUnit1').value;
            const toUnit = document.getElementById('pressureUnit2').value;
            
            // Î®ºÏ†Ä ÌååÏä§ÏπºÎ°ú Î≥ÄÌôò
            const pascals = value / conversions.pressure[fromUnit];
            // Î™©Ìëú Îã®ÏúÑÎ°ú Î≥ÄÌôò
            const result = pascals * conversions.pressure[toUnit];
            
            document.getElementById('pressure2').value = result.toFixed(6);
        }
        
        // Ï¥àÍ∏∞ Î≥ÄÌôò
        convertLength(1);
        convertPressure(1);
    </script>
</body>
</html>`;
}

// Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏ ÌÖúÌîåÎ¶ø
function generatePomodoroTimer(date) {
  return `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Í≥µÎåÄÏÉù Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            background: white;
            border-radius: 30px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            max-width: 500px;
            width: 100%;
            text-align: center;
        }
        h1 {
            color: #333;
            margin-bottom: 30px;
        }
        .timer-display {
            font-size: 5rem;
            font-weight: bold;
            color: #1e3c72;
            margin: 30px 0;
            font-family: 'Courier New', monospace;
        }
        .timer-ring {
            width: 250px;
            height: 250px;
            margin: 0 auto 30px;
            position: relative;
        }
        .timer-ring svg {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }
        .timer-ring circle {
            fill: none;
            stroke-width: 10;
        }
        .timer-ring-bg {
            stroke: #e0e0e0;
        }
        .timer-ring-progress {
            stroke: #4CAF50;
            stroke-linecap: round;
            transition: stroke-dashoffset 1s linear;
        }
        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 30px;
        }
        button {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
        }
        .start-btn {
            background: #4CAF50;
            color: white;
        }
        .start-btn:hover {
            background: #45a049;
            transform: scale(1.05);
        }
        .pause-btn {
            background: #ff9800;
            color: white;
        }
        .reset-btn {
            background: #f44336;
            color: white;
        }
        .session-info {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-top: 30px;
        }
        .info-box {
            background: #f5f5f5;
            padding: 15px;
            border-radius: 10px;
        }
        .info-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 5px;
        }
        .info-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }
        .subjects {
            margin-top: 20px;
            text-align: left;
        }
        .subject-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background: #f9f9f9;
            margin-bottom: 5px;
            border-radius: 5px;
        }
        .phase {
            font-size: 1.2rem;
            color: #666;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üçÖ Í≥µÎåÄÏÉù Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏</h1>
        
        <div class="phase" id="phase">ÏßëÏ§ë ÏãúÍ∞Ñ</div>
        
        <div class="timer-ring">
            <svg>
                <circle class="timer-ring-bg" cx="125" cy="125" r="120"></circle>
                <circle class="timer-ring-progress" id="progress" cx="125" cy="125" r="120"
                        stroke-dasharray="754" stroke-dashoffset="0"></circle>
            </svg>
            <div class="timer-display" id="timer" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                25:00
            </div>
        </div>
        
        <div class="controls">
            <button class="start-btn" id="startBtn" onclick="startTimer()">ÏãúÏûë</button>
            <button class="pause-btn" id="pauseBtn" onclick="pauseTimer()" style="display: none;">ÏùºÏãúÏ†ïÏßÄ</button>
            <button class="reset-btn" onclick="resetTimer()">Î¶¨ÏÖã</button>
        </div>
        
        <div class="session-info">
            <div class="info-box">
                <div class="info-label">Ïò§Îäò ÏôÑÎ£å</div>
                <div class="info-value" id="todayCount">0</div>
            </div>
            <div class="info-box">
                <div class="info-label">Ï¥ù Í≥µÎ∂Ä ÏãúÍ∞Ñ</div>
                <div class="info-value" id="totalTime">0ÏãúÍ∞Ñ</div>
            </div>
            <div class="info-box">
                <div class="info-label">ÌòÑÏû¨ Ïä§Ìä∏Î¶≠</div>
                <div class="info-value" id="streak">0Ïùº</div>
            </div>
        </div>
        
        <div class="subjects">
            <h3>Í≥ºÎ™©Î≥Ñ Í≥µÎ∂Ä ÏãúÍ∞Ñ</h3>
            <div class="subject-item">
                <span>ÎØ∏Ï†ÅÎ∂ÑÌïô</span>
                <span>2.5ÏãúÍ∞Ñ</span>
            </div>
            <div class="subject-item">
                <span>Î¨ºÎ¶¨Ìïô</span>
                <span>1.8ÏãúÍ∞Ñ</span>
            </div>
            <div class="subject-item">
                <span>ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç</span>
                <span>3.2ÏãúÍ∞Ñ</span>
            </div>
        </div>
    </div>
    
    <script>
        let timeLeft = 25 * 60; // 25Î∂Ñ
        let isRunning = false;
        let interval;
        let isBreak = false;
        let sessionsCompleted = 0;
        
        const circumference = 2 * Math.PI * 120;
        
        function updateDisplay() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            document.getElementById('timer').textContent = 
                \`\${minutes.toString().padStart(2, '0')}:\${seconds.toString().padStart(2, '0')}\`;
            
            // ÌîÑÎ°úÍ∑∏Î†àÏä§ ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏
            const totalTime = isBreak ? 5 * 60 : 25 * 60;
            const progress = (totalTime - timeLeft) / totalTime;
            const offset = circumference - (progress * circumference);
            document.getElementById('progress').style.strokeDashoffset = offset;
        }
        
        function startTimer() {
            if (!isRunning) {
                isRunning = true;
                document.getElementById('startBtn').style.display = 'none';
                document.getElementById('pauseBtn').style.display = 'inline-block';
                
                interval = setInterval(() => {
                    if (timeLeft > 0) {
                        timeLeft--;
                        updateDisplay();
                    } else {
                        // ÌÉÄÏù¥Î®∏ Ï¢ÖÎ£å
                        clearInterval(interval);
                        isRunning = false;
                        
                        if (!isBreak) {
                            sessionsCompleted++;
                            document.getElementById('todayCount').textContent = sessionsCompleted;
                            
                            // Ìú¥Ïãù ÏãúÍ∞ÑÏúºÎ°ú Ï†ÑÌôò
                            isBreak = true;
                            timeLeft = 5 * 60;
                            document.getElementById('phase').textContent = 'Ìú¥Ïãù ÏãúÍ∞Ñ';
                            document.getElementById('progress').style.stroke = '#2196F3';
                            
                            // ÏïåÎ¶º
                            alert('ÏàòÍ≥†ÌïòÏÖ®ÏäµÎãàÎã§! 5Î∂Ñ Ìú¥ÏãùÌïòÏÑ∏Ïöî.');
                        } else {
                            // ÏßëÏ§ë ÏãúÍ∞ÑÏúºÎ°ú Ï†ÑÌôò
                            isBreak = false;
                            timeLeft = 25 * 60;
                            document.getElementById('phase').textContent = 'ÏßëÏ§ë ÏãúÍ∞Ñ';
                            document.getElementById('progress').style.stroke = '#4CAF50';
                            
                            alert('Ìú¥Ïãù ÎÅù! Îã§Ïãú ÏßëÏ§ëÌï¥Î¥ÖÏãúÎã§.');
                        }
                        
                        updateDisplay();
                        document.getElementById('startBtn').style.display = 'inline-block';
                        document.getElementById('pauseBtn').style.display = 'none';
                    }
                }, 1000);
            }
        }
        
        function pauseTimer() {
            if (isRunning) {
                clearInterval(interval);
                isRunning = false;
                document.getElementById('startBtn').style.display = 'inline-block';
                document.getElementById('pauseBtn').style.display = 'none';
            }
        }
        
        function resetTimer() {
            clearInterval(interval);
            isRunning = false;
            isBreak = false;
            timeLeft = 25 * 60;
            document.getElementById('phase').textContent = 'ÏßëÏ§ë ÏãúÍ∞Ñ';
            document.getElementById('progress').style.stroke = '#4CAF50';
            updateDisplay();
            document.getElementById('startBtn').style.display = 'inline-block';
            document.getElementById('pauseBtn').style.display = 'none';
        }
        
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÌÜµÍ≥Ñ Î∂àÎü¨Ïò§Í∏∞
        function loadStats() {
            const stats = JSON.parse(localStorage.getItem('pomodoroStats') || '{}');
            const today = new Date().toDateString();
            
            if (stats.lastDate !== today) {
                stats.todayCount = 0;
                stats.lastDate = today;
            }
            
            sessionsCompleted = stats.todayCount || 0;
            document.getElementById('todayCount').textContent = sessionsCompleted;
            
            const totalHours = Math.floor((stats.totalSessions || 0) * 25 / 60);
            document.getElementById('totalTime').textContent = totalHours + 'ÏãúÍ∞Ñ';
        }
        
        // Ï¥àÍ∏∞Ìôî
        updateDisplay();
        loadStats();
    </script>
</body>
</html>`;
}

// Îã§Î•∏ ÌÖúÌîåÎ¶ø Ìï®ÏàòÎì§ÎèÑ ÌïÑÏöîÏóê Îî∞Îùº Ï∂îÍ∞Ä...
// (ÎÇòÎ®∏ÏßÄ Ìï®ÏàòÎì§ÏùÄ Í∏∞Î≥∏ Íµ¨Ï°∞Îßå Ï†úÍ≥µ)

function generateLaplaceTransform(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateIntegralVisualizer(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generatePendulumSimulator(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateProjectileMotion(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateWaveInterference(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateCircuitSimulator(date) {
  return generateUnitConverter(date); // ÏûÑÏãú
}

function generateBeamCalculator(date) {
  return generateUnitConverter(date); // ÏûÑÏãú
}

function generateSortingVisualizer(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateBigOCalculator(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateBinaryTreeVisualizer(date) {
  return generateMatrixCalculator(date); // ÏûÑÏãú
}

function generateFormulaGame(date) {
  return generatePomodoroTimer(date); // ÏûÑÏãú
}

function generateGPACalculator(date) {
  return generatePomodoroTimer(date); // ÏûÑÏãú
}

function generateCaffeineCalculator(date) {
  return generatePomodoroTimer(date); // ÏûÑÏãú
}

function generateProjectPlanner(date) {
  return generatePomodoroTimer(date); // ÏûÑÏãú
}

function generateDataAnalyzer(date) {
  return generatePomodoroTimer(date); // ÏûÑÏãú
}

// Î©îÏù∏ Ïã§Ìñâ
if (require.main === module) {
  generateEngineeringApps().catch(console.error);
}
